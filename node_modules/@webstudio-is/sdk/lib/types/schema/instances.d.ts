import { z } from "zod";
export declare const Text: z.ZodObject<{
    type: z.ZodLiteral<"text">;
    value: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "text";
}, {
    value: string;
    type: "text";
}>;
export type Text = z.infer<typeof Text>;
export declare const Id: z.ZodObject<{
    type: z.ZodLiteral<"id">;
    value: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: string;
    type: "id";
}, {
    value: string;
    type: "id";
}>;
export type Id = z.infer<typeof Id>;
export declare const Instance: z.ZodObject<{
    type: z.ZodLiteral<"instance">;
    id: z.ZodString;
    component: z.ZodString;
    label: z.ZodOptional<z.ZodString>;
    children: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"id">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        type: "id";
    }, {
        value: string;
        type: "id";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"text">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        type: "text";
    }, {
        value: string;
        type: "text";
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "instance";
    id: string;
    component: string;
    children: ({
        value: string;
        type: "text";
    } | {
        value: string;
        type: "id";
    })[];
    label?: string | undefined;
}, {
    type: "instance";
    id: string;
    component: string;
    children: ({
        value: string;
        type: "text";
    } | {
        value: string;
        type: "id";
    })[];
    label?: string | undefined;
}>;
export type Instance = z.infer<typeof Instance>;
export declare const Instances: z.ZodMap<z.ZodString, z.ZodObject<{
    type: z.ZodLiteral<"instance">;
    id: z.ZodString;
    component: z.ZodString;
    label: z.ZodOptional<z.ZodString>;
    children: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"id">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        type: "id";
    }, {
        value: string;
        type: "id";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"text">;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        type: "text";
    }, {
        value: string;
        type: "text";
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "instance";
    id: string;
    component: string;
    children: ({
        value: string;
        type: "text";
    } | {
        value: string;
        type: "id";
    })[];
    label?: string | undefined;
}, {
    type: "instance";
    id: string;
    component: string;
    children: ({
        value: string;
        type: "text";
    } | {
        value: string;
        type: "id";
    })[];
    label?: string | undefined;
}>>;
export type Instances = z.infer<typeof Instances>;
