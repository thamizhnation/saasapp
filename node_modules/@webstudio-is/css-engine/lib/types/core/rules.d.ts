import type { Style, StyleProperty, StyleValue } from "../schema";
import { type TransformValue } from "./to-value";
declare class StylePropertyMap {
    #private;
    onChange?: () => void;
    constructor(transformValue?: TransformValue);
    setTransformer(transformValue: TransformValue): void;
    set(property: StyleProperty, value?: StyleValue): void;
    has(property: StyleProperty): boolean;
    get size(): number;
    keys(): IterableIterator<StyleProperty>;
    delete(property: StyleProperty): void;
    clear(): void;
    toString({ indent }?: {
        indent?: number | undefined;
    }): string;
}
export declare class StyleRule {
    #private;
    styleMap: StylePropertyMap;
    selectorText: string;
    onChange?: () => void;
    constructor(selectorText: string, style: Style, transformValue?: TransformValue);
    get cssText(): string;
    toString(options?: {
        indent: number;
    }): string;
}
export type MediaRuleOptions = {
    minWidth?: number;
    maxWidth?: number;
    mediaType?: "all" | "screen" | "print";
};
export declare class MediaRule {
    #private;
    options: MediaRuleOptions;
    rules: Array<StyleRule | PlaintextRule>;
    constructor(options?: MediaRuleOptions);
    insertRule(rule: StyleRule | PlaintextRule): StyleRule | PlaintextRule;
    get cssText(): string;
    toString(): string;
}
export declare class PlaintextRule {
    cssText: string;
    styleMap: StylePropertyMap;
    constructor(cssText: string);
    toString(): string;
}
export type FontFaceOptions = {
    fontFamily: string;
    fontStyle?: "normal" | "italic" | "oblique";
    fontWeight?: number | string;
    fontDisplay: "swap" | "auto" | "block" | "fallback" | "optional";
    src: string;
};
export declare class FontFaceRule {
    options: FontFaceOptions;
    constructor(options: FontFaceOptions);
    get cssText(): string;
    toString(): string;
}
export type AnyRule = StyleRule | MediaRule | PlaintextRule | FontFaceRule;
export {};
