import type { Style } from "../schema";
import { MediaRule, PlaintextRule, StyleRule, type FontFaceOptions, type MediaRuleOptions } from "./rules";
import type { TransformValue } from "./to-value";
type CssRule = {
    style: Style;
    breakpoint?: string;
};
export type CssEngineOptions = {
    name?: string;
};
export declare class CssEngine {
    #private;
    constructor({ name }: CssEngineOptions);
    addMediaRule(id: string, options?: MediaRuleOptions): MediaRule;
    addStyleRule(selectorText: string, rule: CssRule, transformValue?: TransformValue): StyleRule;
    addPlaintextRule(cssText: string): PlaintextRule | Map<string, PlaintextRule>;
    addFontFaceRule(options: FontFaceOptions): number;
    clear(): void;
    render(): void;
    unmount(): void;
    setAttribute(name: string, value: string): void;
    getAttribute(name: string): string | null | undefined;
    get cssText(): string;
}
export {};
