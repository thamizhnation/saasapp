import type { Instances, Instance, Props, Scope, DataSources } from "@webstudio-is/sdk";
import type { IndexesWithinAncestors } from "./instance-utils";
export declare const generateJsxElement: ({ scope, instance, props, dataSources, indexesWithinAncestors, children, }: {
    scope: Scope;
    instance: Instance;
    props: Map<string, {
        value: number;
        type: "number";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "string";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: boolean;
        type: "boolean";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "asset";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: (string | {
            instanceId: string;
            pageId: string;
        }) & (string | {
            instanceId: string;
            pageId: string;
        } | undefined);
        type: "page";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string[];
        type: "string[]";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "dataSource";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: {
            code: string;
            type: "execute";
            args: string[];
        }[];
        type: "action";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    }>;
    dataSources: Map<string, {
        value: {
            value: number;
            type: "number";
        } | {
            value: string;
            type: "string";
        } | {
            value: boolean;
            type: "boolean";
        } | {
            value: string[];
            type: "string[]";
        };
        type: "variable";
        name: string;
        id: string;
        scopeInstanceId?: string | undefined;
    } | {
        code: string;
        type: "expression";
        name: string;
        id: string;
        scopeInstanceId?: string | undefined;
    }>;
    indexesWithinAncestors: IndexesWithinAncestors;
    children: string;
}) => string;
/**
 * Jsx element and children are generated separately to be able
 * to inject some scripts into Body if necessary
 */
export declare const generateJsxChildren: ({ scope, children, instances, props, dataSources, indexesWithinAncestors, }: {
    scope: Scope;
    children: Instance["children"];
    instances: Map<string, {
        type: "instance";
        id: string;
        component: string;
        children: ({
            value: string;
            type: "text";
        } | {
            value: string;
            type: "id";
        })[];
        label?: string | undefined;
    }>;
    props: Map<string, {
        value: number;
        type: "number";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "string";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: boolean;
        type: "boolean";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "asset";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: (string | {
            instanceId: string;
            pageId: string;
        }) & (string | {
            instanceId: string;
            pageId: string;
        } | undefined);
        type: "page";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string[];
        type: "string[]";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "dataSource";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: {
            code: string;
            type: "execute";
            args: string[];
        }[];
        type: "action";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    }>;
    dataSources: Map<string, {
        value: {
            value: number;
            type: "number";
        } | {
            value: string;
            type: "string";
        } | {
            value: boolean;
            type: "boolean";
        } | {
            value: string[];
            type: "string[]";
        };
        type: "variable";
        name: string;
        id: string;
        scopeInstanceId?: string | undefined;
    } | {
        code: string;
        type: "expression";
        name: string;
        id: string;
        scopeInstanceId?: string | undefined;
    }>;
    indexesWithinAncestors: IndexesWithinAncestors;
}) => string;
export declare const generatePageComponent: ({ scope, rootInstanceId, instances, props, dataSources, indexesWithinAncestors, }: {
    scope: Scope;
    rootInstanceId: Instance["id"];
    instances: Map<string, {
        type: "instance";
        id: string;
        component: string;
        children: ({
            value: string;
            type: "text";
        } | {
            value: string;
            type: "id";
        })[];
        label?: string | undefined;
    }>;
    props: Map<string, {
        value: number;
        type: "number";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "string";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: boolean;
        type: "boolean";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "asset";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: (string | {
            instanceId: string;
            pageId: string;
        }) & (string | {
            instanceId: string;
            pageId: string;
        } | undefined);
        type: "page";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string[];
        type: "string[]";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: string;
        type: "dataSource";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    } | {
        value: {
            code: string;
            type: "execute";
            args: string[];
        }[];
        type: "action";
        name: string;
        id: string;
        instanceId: string;
        required?: boolean | undefined;
    }>;
    dataSources: Map<string, {
        value: {
            value: number;
            type: "number";
        } | {
            value: string;
            type: "string";
        } | {
            value: boolean;
            type: "boolean";
        } | {
            value: string[];
            type: "string[]";
        };
        type: "variable";
        name: string;
        id: string;
        scopeInstanceId?: string | undefined;
    } | {
        code: string;
        type: "expression";
        name: string;
        id: string;
        scopeInstanceId?: string | undefined;
    }>;
    indexesWithinAncestors: IndexesWithinAncestors;
}) => string;
