import { type TransformValue } from "@webstudio-is/css-engine";
import type { Asset, Breakpoint, Instance, StyleDecl, StyleDeclKey, StyleSourceSelection } from "@webstudio-is/sdk";
import type { WsComponentMeta } from "../components/component-meta";
type Data = {
    assets: Asset[];
    breakpoints: [Breakpoint["id"], Breakpoint][];
    styles: [StyleDeclKey, StyleDecl][];
    styleSourceSelections: [Instance["id"], StyleSourceSelection][];
    componentMetas: Map<string, WsComponentMeta>;
};
type CssOptions = {
    assetBaseUrl: string;
};
export declare const createImageValueTransformer: (assets: Map<string, {
    type: "font";
    name: string;
    format: "ttf" | "woff" | "woff2" | "otf";
    meta: ({
        family: string;
        style: "normal" | "italic" | "oblique";
        weight: number;
    } | {
        family: string;
        variationAxes: Partial<Record<"wght" | "wdth" | "slnt" | "opsz" | "ital" | "GRAD" | "XTRA" | "XOPQ" | "YOPQ" | "YTLC" | "YTUC" | "YTAS" | "YTDE" | "YTFI", {
            name: string;
            min: number;
            default: number;
            max: number;
        }>>;
    }) & ({
        family: string;
        style: "normal" | "italic" | "oblique";
        weight: number;
    } | {
        family: string;
        variationAxes: Partial<Record<"wght" | "wdth" | "slnt" | "opsz" | "ital" | "GRAD" | "XTRA" | "XOPQ" | "YOPQ" | "YTLC" | "YTUC" | "YTAS" | "YTDE" | "YTFI", {
            name: string;
            min: number;
            default: number;
            max: number;
        }>>;
    } | undefined);
    id: string;
    projectId: string;
    size: number;
    description: string | null;
    createdAt: string;
} | {
    type: "image";
    name: string;
    format: string;
    meta: {
        width: number;
        height: number;
    };
    id: string;
    projectId: string;
    size: number;
    description: string | null;
    createdAt: string;
}>, options: CssOptions) => TransformValue;
export declare const generateCssText: (data: Data, options: CssOptions) => string;
export {};
