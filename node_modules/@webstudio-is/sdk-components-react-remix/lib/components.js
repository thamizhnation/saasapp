// src/link.tsx
import { Link as BaseLink } from "@webstudio-is/sdk-components-react";

// src/shared/remix-link.tsx
import { forwardRef, useContext } from "react";
import { NavLink as RemixLink } from "@remix-run/react";
import { ReactSdkContext } from "@webstudio-is/react-sdk";
import { jsx } from "react/jsx-runtime";
var wrapLinkComponent = (BaseLink3) => {
  const Component = forwardRef((props, ref) => {
    const { pagesPaths } = useContext(ReactSdkContext);
    const href = props.href;
    if (href !== void 0) {
      const url = new URL(href, "https://any-valid.url");
      if (pagesPaths.has(url.pathname === "/" ? "" : url.pathname)) {
        return /* @__PURE__ */ jsx(RemixLink, { ...props, to: href, ref });
      }
    }
    const { prefetch, reloadDocument, replace, preventScrollReset, ...rest } = props;
    return /* @__PURE__ */ jsx(BaseLink3, { ...rest, ref });
  });
  Component.displayName = BaseLink3.displayName;
  return Component;
};

// src/link.tsx
var Link = wrapLinkComponent(BaseLink);

// src/rich-text-link.tsx
import { RichTextLink as BaseLink2 } from "@webstudio-is/sdk-components-react";
var RichTextLink = wrapLinkComponent(BaseLink2);

// src/form.tsx
import {
  forwardRef as forwardRef2,
  useRef,
  useEffect
} from "react";
import { useFetcher } from "@remix-run/react";
import { formIdFieldName } from "@webstudio-is/form-handlers";
import { getInstanceIdFromComponentProps } from "@webstudio-is/react-sdk";
import { jsx as jsx2, jsxs } from "react/jsx-runtime";
var useOnFetchEnd = (fetcher, handler) => {
  const latestHandler = useRef(handler);
  latestHandler.current = handler;
  const prevFetcher = useRef(fetcher);
  useEffect(() => {
    if (prevFetcher.current.state !== fetcher.state && fetcher.state === "idle" && fetcher.data !== void 0) {
      latestHandler.current(fetcher.data);
    }
    prevFetcher.current = fetcher;
  }, [fetcher]);
};
var Form = forwardRef2(
  ({ children, action, method, state = "initial", onStateChange, ...rest }, ref) => {
    const fetcher = useFetcher();
    const instanceId = getInstanceIdFromComponentProps(rest);
    useOnFetchEnd(fetcher, (data) => {
      const state2 = data?.success === true ? "success" : "error";
      onStateChange?.(state2);
    });
    return /* @__PURE__ */ jsxs(fetcher.Form, { ...rest, method: "post", "data-state": state, ref, children: [
      /* @__PURE__ */ jsx2("input", { type: "hidden", name: formIdFieldName, value: instanceId }),
      children
    ] });
  }
);
Form.displayName = "Form";
export {
  Form,
  Link,
  RichTextLink
};
