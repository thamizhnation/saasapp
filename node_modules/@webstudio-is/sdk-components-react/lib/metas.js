// src/slot.ws.ts
import { SlotComponentIcon } from "@webstudio-is/icons/svg";
var meta = {
  category: "general",
  type: "container",
  label: "Slot",
  description: "Slot is a container for content that you want to reference across the project. Changes made to a Slot's children will be reflected in all other instances of that Slot.",
  icon: SlotComponentIcon,
  stylable: false,
  order: 6
};

// src/fragment.ws.ts
var meta2 = {
  type: "container",
  label: "Fragment",
  icon: "",
  stylable: false
};

// src/html-embed.ws.ts
import { EmbedIcon } from "@webstudio-is/icons/svg";

// src/__generated__/html-embed.props.ts
var props = {
  clientOnly: { required: false, control: "boolean", type: "boolean" },
  code: { required: true, control: "text", type: "string" },
  executeScriptOnCanvas: {
    required: false,
    control: "boolean",
    type: "boolean"
  }
};

// src/html-embed.ws.ts
var meta3 = {
  category: "general",
  type: "embed",
  label: "HTML Embed",
  description: "Used to add HTML code to the page, such as an SVG or script.",
  icon: EmbedIcon,
  stylable: false,
  order: 7
};
var propsMeta = {
  props: {
    ...props,
    executeScriptOnCanvas: {
      ...props.executeScriptOnCanvas,
      label: "Run script on canvas"
    },
    code: {
      required: true,
      control: "code",
      type: "string",
      rows: 10
    }
  },
  initialProps: ["clientOnly", "executeScriptOnCanvas"]
};

// src/body.ws.tsx
import { BodyIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates
} from "@webstudio-is/react-sdk";
import { body } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle = {
  body: [
    ...body,
    {
      property: "WebkitFontSmoothing",
      value: { type: "keyword", value: "antialiased" }
    },
    {
      property: "MozOsxFontSmoothing",
      value: { type: "keyword", value: "grayscale" }
    }
  ]
};
var meta4 = {
  type: "container",
  label: "Body",
  icon: BodyIcon,
  states: defaultStates,
  presetStyle
};

// src/box.ws.ts
import { BoxIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates2
} from "@webstudio-is/react-sdk";
import {
  div,
  address,
  article,
  aside,
  figure,
  footer,
  header,
  main,
  nav,
  section
} from "@webstudio-is/react-sdk/css-normalize";
var presetStyle2 = {
  div,
  address,
  article,
  aside,
  figure,
  footer,
  header,
  main,
  nav,
  section
};
var meta5 = {
  category: "general",
  type: "container",
  label: "Box",
  description: "A container for content. By default this is a Div, but the tag can be changed in settings.",
  icon: BoxIcon,
  states: defaultStates2,
  presetStyle: presetStyle2,
  order: 0
};

// src/text.ws.tsx
import { TextIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates3
} from "@webstudio-is/react-sdk";
import { div as div2 } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle3 = {
  div: [
    ...div2,
    {
      property: "minHeight",
      value: { type: "unit", unit: "em", value: 1 }
    }
  ]
};
var meta6 = {
  category: "text",
  type: "container",
  label: "Text",
  description: "A generic container for any text content that is not a heading or a link.",
  icon: TextIcon,
  states: defaultStates3,
  presetStyle: presetStyle3,
  order: 0
};

// src/heading.ws.tsx
import { HeadingIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates4
} from "@webstudio-is/react-sdk";
import { h1, h2, h3, h4, h5, h6 } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle4 = {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6
};
var meta7 = {
  category: "text",
  type: "container",
  label: "Heading",
  description: "Use HTML headings to structure and organize content. Use the Tag property in settings to change the heading level (h1-h6).",
  icon: HeadingIcon,
  invalidAncestors: ["Heading"],
  states: defaultStates4,
  presetStyle: presetStyle4,
  order: 1
};

// src/paragraph.ws.tsx
import { TextAlignLeftIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates5
} from "@webstudio-is/react-sdk";
import { p } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle5 = {
  p
};
var meta8 = {
  category: "text",
  type: "container",
  label: "Paragraph",
  description: "A container for multi-line text.",
  icon: TextAlignLeftIcon,
  invalidAncestors: ["Paragraph"],
  states: defaultStates5,
  presetStyle: presetStyle5,
  order: 2
};

// src/link.ws.tsx
import { LinkIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates6
} from "@webstudio-is/react-sdk";
import { a } from "@webstudio-is/react-sdk/css-normalize";

// src/__generated__/link.props.ts
var props2 = {
  about: { required: false, control: "text", type: "string" },
  accessKey: {
    required: false,
    control: "text",
    type: "string",
    description: "Keyboard shortcut to activate or add focus to the element."
  },
  "aria-activedescendant": {
    description: "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-atomic": {
    description: "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-autocomplete": {
    description: "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
    required: false,
    control: "select",
    type: "string",
    options: ["list", "none", "inline", "both"]
  },
  "aria-braillelabel": {
    description: "Defines a string value that labels the current element, which is intended to be converted into Braille.\n@see aria-label.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-brailleroledescription": {
    description: "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.\n@see aria-roledescription.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-busy": { required: false, control: "boolean", type: "boolean" },
  "aria-checked": {
    description: 'Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.',
    required: false,
    control: "text",
    type: "string"
  },
  "aria-colcount": {
    description: "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-colindex": {
    description: "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-colindextext": {
    description: "Defines a human readable text alternative of aria-colindex.\n@see aria-rowindextext.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-colspan": {
    description: "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-controls": {
    description: "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-current": {
    description: "Indicates the element that represents the current item within a container or set of related elements.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-describedby": {
    description: "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-description": {
    description: "Defines a string value that describes or annotates the current element.\n@see related aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-details": {
    description: "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-disabled": {
    description: "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-dropeffect": {
    description: "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
    required: false,
    control: "select",
    type: "string",
    options: ["link", "none", "copy", "execute", "move", "popup"]
  },
  "aria-errormessage": {
    description: "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-expanded": {
    description: "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-flowto": {
    description: "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-grabbed": {
    description: `Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-haspopup": {
    description: "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-hidden": {
    description: "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-invalid": {
    description: "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-keyshortcuts": {
    description: "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-label": {
    description: "Provides the accessible name that describes an interactive element if no other accessible name exists, for example in a button that contains an image with no text.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-labelledby": {
    description: "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-level": {
    description: "Defines the hierarchical level of an element within a structure.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-live": {
    description: "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
    required: false,
    control: "radio",
    type: "string",
    options: ["off", "assertive", "polite"]
  },
  "aria-modal": {
    description: "Indicates whether an element is modal when displayed.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-multiline": {
    description: "Indicates whether a text box accepts multiple lines of input or only a single line.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-multiselectable": {
    description: "Indicates that the user may select more than one item from the current selectable descendants.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-orientation": {
    description: "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
    required: false,
    control: "radio",
    type: "string",
    options: ["horizontal", "vertical"]
  },
  "aria-owns": {
    description: "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-placeholder": {
    description: "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-posinset": {
    description: "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-pressed": {
    description: 'Indicates the current "pressed" state of toggle buttons.\n@see aria-checked\n@see aria-selected.',
    required: false,
    control: "text",
    type: "string"
  },
  "aria-readonly": {
    description: "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-relevant": {
    description: "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
    required: false,
    control: "select",
    type: "string",
    options: [
      "text",
      "additions",
      "additions removals",
      "additions text",
      "all",
      "removals",
      "removals additions",
      "removals text",
      "text additions",
      "text removals"
    ]
  },
  "aria-required": {
    description: "Indicates that user input is required on the element before a form may be submitted.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-roledescription": {
    description: "Defines a human-readable, author-localized description for the role of an element.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-rowcount": {
    description: "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-rowindex": {
    description: "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-rowindextext": {
    description: "Defines a human readable text alternative of aria-rowindex.\n@see aria-colindextext.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-rowspan": {
    description: "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-selected": {
    description: 'Indicates the current "selected" state of various widgets.\n@see aria-checked\n@see aria-pressed.',
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-setsize": {
    description: "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-sort": {
    description: "Indicates if items in a table or grid are sorted in ascending or descending order.",
    required: false,
    control: "select",
    type: "string",
    options: ["none", "ascending", "descending", "other"]
  },
  "aria-valuemax": {
    description: "Defines the maximum allowed value for a range widget.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-valuemin": {
    description: "Defines the minimum allowed value for a range widget.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-valuenow": {
    description: "Defines the current value for a range widget.\n@see aria-valuetext.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-valuetext": {
    description: "Defines the human readable text alternative of aria-valuenow for a range widget.",
    required: false,
    control: "text",
    type: "string"
  },
  autoCapitalize: {
    required: false,
    control: "text",
    type: "string",
    description: "Sets whether input is automatically capitalized when entered by user."
  },
  autoCorrect: { required: false, control: "text", type: "string" },
  autoFocus: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Indicates that an element should be focused on page load, or when its parent dialog is displayed."
  },
  autoSave: { required: false, control: "text", type: "string" },
  className: { required: false, control: "text", type: "string" },
  color: {
    required: false,
    control: "color",
    type: "string",
    description: "This attribute sets the text color using either a named color or a  color specified in the hexadecimal #RRGGBB format. Note: This is a legacy attribute. Please use the CSS color property instead."
  },
  content: {
    required: false,
    control: "text",
    type: "string",
    description: "A value associated with http-equiv orname depending on the context."
  },
  contextMenu: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines the ID of a menu element which willserve as the element's context menu."
  },
  datatype: { required: false, control: "text", type: "string" },
  defaultChecked: { required: false, control: "boolean", type: "boolean" },
  dir: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
  },
  draggable: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Defines whether the element can be dragged."
  },
  hidden: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
  },
  href: {
    required: false,
    control: "text",
    type: "string",
    description: "The URL of a linked resource."
  },
  hrefLang: {
    required: false,
    control: "text",
    type: "string",
    description: "Specifies the language of the linked resource."
  },
  id: {
    required: false,
    control: "text",
    type: "string",
    description: "Often used with CSS to style a specific element. The value of this attribute must be unique."
  },
  inputMode: {
    description: "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
    required: false,
    control: "select",
    type: "string",
    options: [
      "search",
      "text",
      "none",
      "tel",
      "url",
      "email",
      "numeric",
      "decimal"
    ]
  },
  is: {
    description: "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
    required: false,
    control: "text",
    type: "string"
  },
  itemID: { required: false, control: "text", type: "string" },
  itemProp: { required: false, control: "text", type: "string" },
  itemRef: { required: false, control: "text", type: "string" },
  itemScope: { required: false, control: "boolean", type: "boolean" },
  itemType: { required: false, control: "text", type: "string" },
  lang: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines the language used in the element."
  },
  media: {
    required: false,
    control: "text",
    type: "string",
    description: "Specifies a hint of the media for which the linked resource was designed."
  },
  nonce: { required: false, control: "text", type: "string" },
  ping: {
    required: false,
    control: "text",
    type: "string",
    description: "The ping attribute specifies a space-separated list of URLs to be notified if a user follows the hyperlink."
  },
  placeholder: {
    required: false,
    control: "text",
    type: "string",
    description: "Provides a hint to the user of what can be entered in the field."
  },
  prefix: { required: false, control: "text", type: "string" },
  property: { required: false, control: "text", type: "string" },
  radioGroup: { required: false, control: "text", type: "string" },
  referrerPolicy: {
    required: false,
    control: "select",
    type: "string",
    options: [
      "",
      "no-referrer",
      "no-referrer-when-downgrade",
      "origin",
      "origin-when-cross-origin",
      "same-origin",
      "strict-origin",
      "strict-origin-when-cross-origin",
      "unsafe-url"
    ],
    description: "Specifies which referrer is sent when fetching the resource."
  },
  rel: {
    required: false,
    control: "text",
    type: "string",
    description: "Specifies the relationship of the target object to the link object."
  },
  resource: { required: false, control: "text", type: "string" },
  results: { required: false, control: "number", type: "number" },
  rev: { required: false, control: "text", type: "string" },
  role: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines an explicit role for an element for use by assistive technologies."
  },
  security: { required: false, control: "text", type: "string" },
  slot: {
    required: false,
    control: "text",
    type: "string",
    description: "Assigns a slot in a shadow DOM shadow tree to an element."
  },
  spellCheck: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Indicates whether spell checking is allowed for the element."
  },
  suppressContentEditableWarning: {
    required: false,
    control: "boolean",
    type: "boolean"
  },
  suppressHydrationWarning: {
    required: false,
    control: "boolean",
    type: "boolean"
  },
  tabIndex: {
    required: false,
    control: "number",
    type: "number",
    description: "Overrides the browser's default tab order and follows the one specified instead."
  },
  target: {
    required: false,
    control: "select",
    type: "string",
    options: ["_self", "_blank", "_parent", "_top"],
    description: "Specifies where to open the linked document (in the case of an <a> element) or where to display the response received (in the case of a <form> element)"
  },
  title: {
    required: false,
    control: "text",
    type: "string",
    description: "Text to be displayed in a tooltip when hovering over the element."
  },
  translate: {
    required: false,
    control: "radio",
    type: "string",
    options: ["yes", "no"],
    description: "Specify whether an element's attribute values and the values of its text node children are to be translated when the page is localized, or whether to leave them unchanged."
  },
  type: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines the type of the element."
  },
  typeof: { required: false, control: "text", type: "string" },
  unselectable: {
    required: false,
    control: "radio",
    type: "string",
    options: ["on", "off"]
  },
  vocab: { required: false, control: "text", type: "string" }
};

// src/link.ws.tsx
var presetStyle6 = {
  a: [
    ...a,
    {
      property: "minHeight",
      value: { type: "unit", unit: "em", value: 1 }
    },
    {
      property: "display",
      value: { type: "keyword", value: "inline-block" }
    }
  ]
};
var meta9 = {
  category: "general",
  type: "container",
  label: "Link",
  description: "Use a link to send your users to another page, section, or resource. Configure links in the Settings panel.",
  icon: LinkIcon,
  invalidAncestors: ["Link"],
  presetStyle: presetStyle6,
  order: 1,
  states: [
    ...defaultStates6,
    {
      selector: ":visited",
      label: "Visited"
    },
    {
      category: "component-states",
      selector: "[aria-current=page]",
      label: "Current page"
    }
  ]
};
var propsMeta2 = {
  props: {
    ...props2,
    href: {
      type: "string",
      control: "url",
      required: false
    }
  },
  initialProps: ["id", "href", "target"]
};

// src/rich-text-link.ws.tsx
var meta10 = {
  ...meta9,
  category: "hidden",
  type: "rich-text-child",
  template: []
};

// src/span.ws.tsx
import { PaintBrushIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates7
} from "@webstudio-is/react-sdk";
import { span } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle7 = {
  span
};
var meta11 = {
  type: "rich-text-child",
  label: "Text",
  icon: PaintBrushIcon,
  states: defaultStates7,
  presetStyle: presetStyle7
};

// src/bold.ws.tsx
import { BoldIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates8
} from "@webstudio-is/react-sdk";
import { b } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle8 = {
  b
};
var meta12 = {
  type: "rich-text-child",
  label: "Bold Text",
  icon: BoldIcon,
  states: defaultStates8,
  presetStyle: presetStyle8
};

// src/italic.ws.tsx
import { TextItalicIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates9
} from "@webstudio-is/react-sdk";
import { i } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle9 = {
  i: [
    ...i,
    {
      property: "fontStyle",
      value: { type: "keyword", value: "italic" }
    }
  ]
};
var meta13 = {
  type: "rich-text-child",
  label: "Italic Text",
  icon: TextItalicIcon,
  states: defaultStates9,
  presetStyle: presetStyle9
};

// src/superscript.ws.tsx
import { SuperscriptIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates10
} from "@webstudio-is/react-sdk";
import { sup } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle10 = {
  sup
};
var meta14 = {
  type: "rich-text-child",
  label: "Superscript Text",
  icon: SuperscriptIcon,
  states: defaultStates10,
  presetStyle: presetStyle10
};

// src/subscript.ws.tsx
import { SubscriptIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates11
} from "@webstudio-is/react-sdk";
import { sub } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle11 = {
  sub
};
var meta15 = {
  type: "rich-text-child",
  label: "Subscript Text",
  icon: SubscriptIcon,
  states: defaultStates11,
  presetStyle: presetStyle11
};

// src/button.ws.tsx
import { ButtonElementIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates12
} from "@webstudio-is/react-sdk";
import { button } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle12 = {
  button
};
var meta16 = {
  category: "forms",
  type: "container",
  invalidAncestors: ["Button"],
  label: "Button",
  description: "Use a button to submit forms or trigger actions within a page. Do not use a button to navigate users to another resource or another page - that\u2019s what a link is used for.",
  icon: ButtonElementIcon,
  presetStyle: presetStyle12,
  states: [
    ...defaultStates12,
    { selector: ":disabled", label: "Disabled" },
    { selector: ":enabled", label: "Enabled" }
  ],
  order: 1
};

// src/input.ws.tsx
import { FormTextFieldIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates13
} from "@webstudio-is/react-sdk";
import { input } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle13 = {
  input: [
    ...input,
    {
      property: "display",
      value: { type: "keyword", value: "block" }
    }
  ]
};
var meta17 = {
  category: "forms",
  invalidAncestors: ["Button"],
  type: "control",
  label: "Text Input",
  description: "A single-line text input for collecting string data from your users.",
  icon: FormTextFieldIcon,
  presetStyle: presetStyle13,
  order: 3,
  states: [
    ...defaultStates13,
    { selector: "::placeholder", label: "Placeholder" },
    { selector: ":valid", label: "Valid" },
    { selector: ":invalid", label: "Invalid" },
    { selector: ":required", label: "Required" },
    { selector: ":optional", label: "Optional" }
    // Additional states will go into submenu
    //{ selector: ":disabled", label: "Disabled" },
    //{ selector: ":enabled", label: "Enabled" },
    //{ selector: ":read-only", label: "Read Only" },
    //{ selector: ":read-write", label: "Read Write" },
  ]
};

// src/form.ws.tsx
import { FormIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates14
} from "@webstudio-is/react-sdk";
import { form } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle14 = {
  form: [
    ...form,
    { property: "minHeight", value: { type: "unit", unit: "px", value: 20 } }
  ]
};
var meta18 = {
  category: "forms",
  type: "container",
  invalidAncestors: ["Form"],
  label: "Form",
  description: "Collect information from your users using validation rules.",
  icon: FormIcon,
  states: defaultStates14,
  presetStyle: presetStyle14,
  order: 0,
  template: [
    {
      type: "instance",
      component: "Form",
      children: [
        {
          type: "instance",
          component: "Label",
          children: [{ type: "text", value: "Name" }]
        },
        {
          type: "instance",
          component: "Input",
          props: [{ type: "string", name: "name", value: "name" }],
          children: []
        },
        {
          type: "instance",
          component: "Label",
          children: [{ type: "text", value: "Email" }]
        },
        {
          type: "instance",
          component: "Input",
          props: [{ type: "string", name: "name", value: "email" }],
          children: []
        },
        {
          type: "instance",
          component: "Button",
          children: [{ type: "text", value: "Submit" }]
        }
      ]
    }
  ]
};

// src/image.ws.tsx
import { ImageIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates15
} from "@webstudio-is/react-sdk";
import { img } from "@webstudio-is/react-sdk/css-normalize";

// src/__generated__/image.props.ts
var props3 = {
  about: { required: false, control: "text", type: "string" },
  accessKey: {
    required: false,
    control: "text",
    type: "string",
    description: "Keyboard shortcut to activate or add focus to the element."
  },
  alt: {
    required: false,
    control: "text",
    type: "string",
    description: "Text description of the image, which is very important for accessibility and search engine optimization. Screen readers read this description to users so they know what the image means. Alt text is also displayed on the page if the image can't be loaded for some reason."
  },
  "aria-activedescendant": {
    description: "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-atomic": {
    description: "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-autocomplete": {
    description: "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
    required: false,
    control: "select",
    type: "string",
    options: ["list", "none", "inline", "both"]
  },
  "aria-braillelabel": {
    description: "Defines a string value that labels the current element, which is intended to be converted into Braille.\n@see aria-label.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-brailleroledescription": {
    description: "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.\n@see aria-roledescription.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-busy": { required: false, control: "boolean", type: "boolean" },
  "aria-checked": {
    description: 'Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.',
    required: false,
    control: "text",
    type: "string"
  },
  "aria-colcount": {
    description: "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-colindex": {
    description: "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-colindextext": {
    description: "Defines a human readable text alternative of aria-colindex.\n@see aria-rowindextext.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-colspan": {
    description: "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-controls": {
    description: "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-current": {
    description: "Indicates the element that represents the current item within a container or set of related elements.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-describedby": {
    description: "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-description": {
    description: "Defines a string value that describes or annotates the current element.\n@see related aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-details": {
    description: "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-disabled": {
    description: "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-dropeffect": {
    description: "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
    required: false,
    control: "select",
    type: "string",
    options: ["link", "none", "copy", "execute", "move", "popup"]
  },
  "aria-errormessage": {
    description: "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-expanded": {
    description: "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-flowto": {
    description: "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-grabbed": {
    description: `Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-haspopup": {
    description: "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-hidden": {
    description: "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-invalid": {
    description: "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-keyshortcuts": {
    description: "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-label": {
    description: "Provides the accessible name that describes an interactive element if no other accessible name exists, for example in a button that contains an image with no text.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-labelledby": {
    description: "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-level": {
    description: "Defines the hierarchical level of an element within a structure.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-live": {
    description: "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
    required: false,
    control: "radio",
    type: "string",
    options: ["off", "assertive", "polite"]
  },
  "aria-modal": {
    description: "Indicates whether an element is modal when displayed.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-multiline": {
    description: "Indicates whether a text box accepts multiple lines of input or only a single line.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-multiselectable": {
    description: "Indicates that the user may select more than one item from the current selectable descendants.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-orientation": {
    description: "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
    required: false,
    control: "radio",
    type: "string",
    options: ["horizontal", "vertical"]
  },
  "aria-owns": {
    description: "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-placeholder": {
    description: "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-posinset": {
    description: "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-pressed": {
    description: 'Indicates the current "pressed" state of toggle buttons.\n@see aria-checked\n@see aria-selected.',
    required: false,
    control: "text",
    type: "string"
  },
  "aria-readonly": {
    description: "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-relevant": {
    description: "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
    required: false,
    control: "select",
    type: "string",
    options: [
      "text",
      "additions",
      "additions removals",
      "additions text",
      "all",
      "removals",
      "removals additions",
      "removals text",
      "text additions",
      "text removals"
    ]
  },
  "aria-required": {
    description: "Indicates that user input is required on the element before a form may be submitted.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-roledescription": {
    description: "Defines a human-readable, author-localized description for the role of an element.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-rowcount": {
    description: "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-rowindex": {
    description: "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-rowindextext": {
    description: "Defines a human readable text alternative of aria-rowindex.\n@see aria-colindextext.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-rowspan": {
    description: "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-selected": {
    description: 'Indicates the current "selected" state of various widgets.\n@see aria-checked\n@see aria-pressed.',
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-setsize": {
    description: "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-sort": {
    description: "Indicates if items in a table or grid are sorted in ascending or descending order.",
    required: false,
    control: "select",
    type: "string",
    options: ["none", "ascending", "descending", "other"]
  },
  "aria-valuemax": {
    description: "Defines the maximum allowed value for a range widget.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-valuemin": {
    description: "Defines the minimum allowed value for a range widget.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-valuenow": {
    description: "Defines the current value for a range widget.\n@see aria-valuetext.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-valuetext": {
    description: "Defines the human readable text alternative of aria-valuenow for a range widget.",
    required: false,
    control: "text",
    type: "string"
  },
  autoCapitalize: {
    required: false,
    control: "text",
    type: "string",
    description: "Sets whether input is automatically capitalized when entered by user."
  },
  autoCorrect: { required: false, control: "text", type: "string" },
  autoFocus: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Indicates that an element should be focused on page load, or when its parent dialog is displayed."
  },
  autoSave: { required: false, control: "text", type: "string" },
  className: { required: false, control: "text", type: "string" },
  color: {
    required: false,
    control: "color",
    type: "string",
    description: "This attribute sets the text color using either a named color or a  color specified in the hexadecimal #RRGGBB format. Note: This is a legacy attribute. Please use the CSS color property instead."
  },
  content: {
    required: false,
    control: "text",
    type: "string",
    description: "A value associated with http-equiv orname depending on the context."
  },
  contextMenu: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines the ID of a menu element which willserve as the element's context menu."
  },
  crossOrigin: {
    required: false,
    control: "radio",
    type: "string",
    options: ["", "anonymous", "use-credentials"],
    description: "How the element handles cross-origin requests"
  },
  datatype: { required: false, control: "text", type: "string" },
  decoding: {
    required: false,
    control: "radio",
    type: "string",
    options: ["async", "auto", "sync"],
    description: "Indicates the preferred method to decode the image."
  },
  defaultChecked: { required: false, control: "boolean", type: "boolean" },
  dir: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
  },
  draggable: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Defines whether the element can be dragged."
  },
  height: {
    required: false,
    control: "number",
    type: "number",
    description: "Defines the image\u2019s height in pixels."
  },
  hidden: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
  },
  id: {
    required: false,
    control: "text",
    type: "string",
    description: "Often used with CSS to style a specific element. The value of this attribute must be unique."
  },
  inputMode: {
    description: "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
    required: false,
    control: "select",
    type: "string",
    options: [
      "search",
      "text",
      "none",
      "tel",
      "url",
      "email",
      "numeric",
      "decimal"
    ]
  },
  is: {
    description: "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
    required: false,
    control: "text",
    type: "string"
  },
  itemID: { required: false, control: "text", type: "string" },
  itemProp: { required: false, control: "text", type: "string" },
  itemRef: { required: false, control: "text", type: "string" },
  itemScope: { required: false, control: "boolean", type: "boolean" },
  itemType: { required: false, control: "text", type: "string" },
  lang: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines the language used in the element."
  },
  loading: {
    required: false,
    control: "radio",
    type: "string",
    defaultValue: "lazy",
    options: ["eager", "lazy"],
    description: "Determines whether the image will load as soon as possible (Eager), or when it scrolls into view (Lazy). Lazy loading is a great option for pages with many images because it can significantly reduce the time it takes for the page to load initially."
  },
  nonce: { required: false, control: "text", type: "string" },
  optimize: { required: false, control: "boolean", type: "boolean" },
  placeholder: {
    required: false,
    control: "text",
    type: "string",
    description: "Provides a hint to the user of what can be entered in the field."
  },
  prefix: { required: false, control: "text", type: "string" },
  property: { required: false, control: "text", type: "string" },
  quality: { required: false, control: "number", type: "number" },
  radioGroup: { required: false, control: "text", type: "string" },
  referrerPolicy: {
    required: false,
    control: "select",
    type: "string",
    options: [
      "",
      "no-referrer",
      "no-referrer-when-downgrade",
      "origin",
      "origin-when-cross-origin",
      "same-origin",
      "strict-origin",
      "strict-origin-when-cross-origin",
      "unsafe-url"
    ],
    description: "Specifies which referrer is sent when fetching the resource."
  },
  rel: {
    required: false,
    control: "text",
    type: "string",
    description: "Specifies the relationship of the target object to the link object."
  },
  resource: { required: false, control: "text", type: "string" },
  results: { required: false, control: "number", type: "number" },
  rev: { required: false, control: "text", type: "string" },
  role: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines an explicit role for an element for use by assistive technologies."
  },
  security: { required: false, control: "text", type: "string" },
  sizes: { required: false, control: "text", type: "string" },
  slot: {
    required: false,
    control: "text",
    type: "string",
    description: "Assigns a slot in a shadow DOM shadow tree to an element."
  },
  spellCheck: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Indicates whether spell checking is allowed for the element."
  },
  src: {
    required: false,
    control: "text",
    type: "string",
    description: "The URL of the embeddable content."
  },
  srcSet: {
    required: false,
    control: "text",
    type: "string",
    description: "One or more responsive image candidates."
  },
  suppressContentEditableWarning: {
    required: false,
    control: "boolean",
    type: "boolean"
  },
  suppressHydrationWarning: {
    required: false,
    control: "boolean",
    type: "boolean"
  },
  tabIndex: {
    required: false,
    control: "number",
    type: "number",
    description: "Overrides the browser's default tab order and follows the one specified instead."
  },
  title: {
    required: false,
    control: "text",
    type: "string",
    description: "Text to be displayed in a tooltip when hovering over the element."
  },
  translate: {
    required: false,
    control: "radio",
    type: "string",
    options: ["yes", "no"],
    description: "Specify whether an element's attribute values and the values of its text node children are to be translated when the page is localized, or whether to leave them unchanged."
  },
  typeof: { required: false, control: "text", type: "string" },
  unselectable: {
    required: false,
    control: "radio",
    type: "string",
    options: ["on", "off"]
  },
  useMap: { required: false, control: "text", type: "string" },
  vocab: { required: false, control: "text", type: "string" },
  width: {
    required: false,
    control: "number",
    type: "number",
    description: "Defines the image\u2019s width in pixels."
  }
};

// src/image.ws.tsx
var presetStyle15 = {
  img: [
    ...img,
    // Otherwise on new image insert onto canvas it can overfit screen size multiple times
    {
      property: "maxWidth",
      value: { type: "unit", unit: "%", value: 100 }
    },
    // inline | inline-block is not suitable because without line-height: 0 on the parent you get unsuitable spaces/margins
    // see https://stackoverflow.com/questions/24771194/is-the-margin-of-inline-block-4px-is-static-for-all-browsers
    {
      property: "display",
      value: { type: "keyword", value: "block" }
    }
  ]
};
var meta19 = {
  category: "media",
  type: "embed",
  label: "Image",
  description: "Add an image asset to the page. Webstudio automatically converts images to WebP or AVIF format and makes them responsive for best performance.",
  icon: ImageIcon,
  states: defaultStates15,
  presetStyle: presetStyle15,
  order: 0
};
var propsOverrides = {
  src: {
    type: "string",
    control: "file",
    label: "Source",
    required: false
  }
};
var propsMeta3 = {
  props: {
    ...props3,
    ...propsOverrides
  },
  initialProps: ["id", "src", "width", "height", "alt", "loading"]
};

// src/blockquote.ws.tsx
import { BlockquoteIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates16
} from "@webstudio-is/react-sdk";
var presetStyle16 = {
  blockquote: [
    {
      property: "marginTop",
      value: { type: "unit", value: 0, unit: "number" }
    },
    {
      property: "marginRight",
      value: { type: "unit", value: 0, unit: "number" }
    },
    {
      property: "marginBottom",
      value: { type: "unit", value: 10, unit: "px" }
    },
    {
      property: "marginLeft",
      value: { type: "unit", value: 0, unit: "number" }
    },
    {
      property: "paddingTop",
      value: { type: "unit", value: 10, unit: "px" }
    },
    {
      property: "paddingBottom",
      value: { type: "unit", value: 10, unit: "px" }
    },
    {
      property: "paddingLeft",
      value: { type: "unit", value: 20, unit: "px" }
    },
    {
      property: "paddingRight",
      value: { type: "unit", value: 20, unit: "px" }
    },
    {
      property: "borderLeftWidth",
      value: { type: "unit", value: 5, unit: "px" }
    },
    {
      property: "borderLeftStyle",
      value: { type: "keyword", value: "solid" }
    },
    {
      property: "borderLeftColor",
      value: { type: "rgb", r: 226, g: 226, b: 226, alpha: 1 }
    }
  ]
};
var meta20 = {
  category: "text",
  type: "container",
  label: "Blockquote",
  description: "Use to style a quote from an external source like an article or book.",
  icon: BlockquoteIcon,
  states: defaultStates16,
  presetStyle: presetStyle16,
  order: 3
};

// src/list.ws.tsx
import { ListIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates17
} from "@webstudio-is/react-sdk";
import { ol, ul } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle17 = {
  ol: [
    ...ol,
    {
      property: "marginTop",
      value: { type: "keyword", value: "0" }
    },
    {
      property: "marginBottom",
      value: { type: "keyword", value: "10px" }
    },
    {
      property: "paddingLeft",
      value: { type: "keyword", value: "40px" }
    }
  ],
  ul: [
    ...ul,
    {
      property: "marginTop",
      value: { type: "keyword", value: "0" }
    },
    {
      property: "marginBottom",
      value: { type: "keyword", value: "10px" }
    },
    {
      property: "paddingLeft",
      value: { type: "keyword", value: "40px" }
    }
  ]
};
var meta21 = {
  category: "general",
  type: "container",
  label: "List",
  description: "Groups content, like links in a menu or steps in a recipe.",
  icon: ListIcon,
  states: defaultStates17,
  presetStyle: presetStyle17,
  order: 3
};

// src/list-item.ws.tsx
import { ListItemIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates18
} from "@webstudio-is/react-sdk";
import { li } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle18 = {
  li
};
var meta22 = {
  category: "general",
  type: "container",
  requiredAncestors: ["List"],
  label: "List Item",
  description: "Adds a new item to an existing list.",
  icon: ListItemIcon,
  states: defaultStates18,
  presetStyle: presetStyle18,
  order: 4
};

// src/separator.ws.tsx
import { DashIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates19
} from "@webstudio-is/react-sdk";
import { hr } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle19 = {
  hr: [
    ...hr,
    {
      property: "height",
      value: { type: "keyword", value: "1px" }
    },
    {
      property: "backgroundColor",
      value: { type: "keyword", value: "gray" }
    },
    {
      property: "borderTopStyle",
      value: { type: "keyword", value: "none" }
    },
    {
      property: "borderRightStyle",
      value: { type: "keyword", value: "none" }
    },
    {
      property: "borderLeftStyle",
      value: { type: "keyword", value: "none" }
    },
    {
      property: "borderBottomStyle",
      value: { type: "keyword", value: "none" }
    }
  ]
};
var meta23 = {
  category: "general",
  type: "embed",
  label: "Separator",
  description: "Used to visually divide sections of content, helping to improve readability and organization within a webpage.",
  icon: DashIcon,
  states: defaultStates19,
  presetStyle: presetStyle19,
  order: 5
};

// src/code-text.ws.tsx
import { CodeTextIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates20
} from "@webstudio-is/react-sdk";
import { code } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle20 = {
  code: [
    ...code,
    {
      property: "display",
      value: { type: "keyword", value: "block" }
    },
    {
      property: "whiteSpace",
      value: { type: "keyword", value: "pre-wrap" }
    },
    {
      property: "paddingLeft",
      value: { type: "unit", value: 0.2, unit: "em" }
    },
    {
      property: "paddingRight",
      value: { type: "unit", value: 0.2, unit: "em" }
    },
    {
      property: "backgroundColor",
      value: { type: "rgb", r: 238, g: 238, b: 238, alpha: 1 }
    }
  ]
};
var meta24 = {
  category: "general",
  type: "container",
  label: "Code Text",
  description: "Use this component when you want to display code as text on the page.",
  icon: CodeTextIcon,
  invalidAncestors: ["CodeText"],
  states: defaultStates20,
  presetStyle: presetStyle20,
  order: 8
};

// src/label.ws.tsx
import { LabelIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates21
} from "@webstudio-is/react-sdk";
import { label } from "@webstudio-is/react-sdk/css-normalize";

// src/__generated__/label.props.ts
var props4 = {
  about: { required: false, control: "text", type: "string" },
  accessKey: {
    required: false,
    control: "text",
    type: "string",
    description: "Keyboard shortcut to activate or add focus to the element."
  },
  "aria-activedescendant": {
    description: "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-atomic": {
    description: "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-autocomplete": {
    description: "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
    required: false,
    control: "select",
    type: "string",
    options: ["list", "none", "inline", "both"]
  },
  "aria-braillelabel": {
    description: "Defines a string value that labels the current element, which is intended to be converted into Braille.\n@see aria-label.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-brailleroledescription": {
    description: "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.\n@see aria-roledescription.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-busy": { required: false, control: "boolean", type: "boolean" },
  "aria-checked": {
    description: 'Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.',
    required: false,
    control: "text",
    type: "string"
  },
  "aria-colcount": {
    description: "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-colindex": {
    description: "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-colindextext": {
    description: "Defines a human readable text alternative of aria-colindex.\n@see aria-rowindextext.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-colspan": {
    description: "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-controls": {
    description: "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-current": {
    description: "Indicates the element that represents the current item within a container or set of related elements.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-describedby": {
    description: "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-description": {
    description: "Defines a string value that describes or annotates the current element.\n@see related aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-details": {
    description: "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-disabled": {
    description: "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-dropeffect": {
    description: "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
    required: false,
    control: "select",
    type: "string",
    options: ["link", "none", "copy", "execute", "move", "popup"]
  },
  "aria-errormessage": {
    description: "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-expanded": {
    description: "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-flowto": {
    description: "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-grabbed": {
    description: `Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-haspopup": {
    description: "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-hidden": {
    description: "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-invalid": {
    description: "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-keyshortcuts": {
    description: "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-label": {
    description: "Provides the accessible name that describes an interactive element if no other accessible name exists, for example in a button that contains an image with no text.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-labelledby": {
    description: "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-level": {
    description: "Defines the hierarchical level of an element within a structure.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-live": {
    description: "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
    required: false,
    control: "radio",
    type: "string",
    options: ["off", "assertive", "polite"]
  },
  "aria-modal": {
    description: "Indicates whether an element is modal when displayed.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-multiline": {
    description: "Indicates whether a text box accepts multiple lines of input or only a single line.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-multiselectable": {
    description: "Indicates that the user may select more than one item from the current selectable descendants.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-orientation": {
    description: "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
    required: false,
    control: "radio",
    type: "string",
    options: ["horizontal", "vertical"]
  },
  "aria-owns": {
    description: "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-placeholder": {
    description: "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-posinset": {
    description: "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-pressed": {
    description: 'Indicates the current "pressed" state of toggle buttons.\n@see aria-checked\n@see aria-selected.',
    required: false,
    control: "text",
    type: "string"
  },
  "aria-readonly": {
    description: "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-relevant": {
    description: "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
    required: false,
    control: "select",
    type: "string",
    options: [
      "text",
      "additions",
      "additions removals",
      "additions text",
      "all",
      "removals",
      "removals additions",
      "removals text",
      "text additions",
      "text removals"
    ]
  },
  "aria-required": {
    description: "Indicates that user input is required on the element before a form may be submitted.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-roledescription": {
    description: "Defines a human-readable, author-localized description for the role of an element.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-rowcount": {
    description: "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-rowindex": {
    description: "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-rowindextext": {
    description: "Defines a human readable text alternative of aria-rowindex.\n@see aria-colindextext.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-rowspan": {
    description: "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-selected": {
    description: 'Indicates the current "selected" state of various widgets.\n@see aria-checked\n@see aria-pressed.',
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-setsize": {
    description: "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-sort": {
    description: "Indicates if items in a table or grid are sorted in ascending or descending order.",
    required: false,
    control: "select",
    type: "string",
    options: ["none", "ascending", "descending", "other"]
  },
  "aria-valuemax": {
    description: "Defines the maximum allowed value for a range widget.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-valuemin": {
    description: "Defines the minimum allowed value for a range widget.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-valuenow": {
    description: "Defines the current value for a range widget.\n@see aria-valuetext.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-valuetext": {
    description: "Defines the human readable text alternative of aria-valuenow for a range widget.",
    required: false,
    control: "text",
    type: "string"
  },
  autoCapitalize: {
    required: false,
    control: "text",
    type: "string",
    description: "Sets whether input is automatically capitalized when entered by user."
  },
  autoCorrect: { required: false, control: "text", type: "string" },
  autoFocus: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Indicates that an element should be focused on page load, or when its parent dialog is displayed."
  },
  autoSave: { required: false, control: "text", type: "string" },
  className: { required: false, control: "text", type: "string" },
  color: {
    required: false,
    control: "color",
    type: "string",
    description: "This attribute sets the text color using either a named color or a  color specified in the hexadecimal #RRGGBB format. Note: This is a legacy attribute. Please use the CSS color property instead."
  },
  content: {
    required: false,
    control: "text",
    type: "string",
    description: "A value associated with http-equiv orname depending on the context."
  },
  contextMenu: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines the ID of a menu element which willserve as the element's context menu."
  },
  datatype: { required: false, control: "text", type: "string" },
  defaultChecked: { required: false, control: "boolean", type: "boolean" },
  dir: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
  },
  draggable: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Defines whether the element can be dragged."
  },
  form: {
    required: false,
    control: "text",
    type: "string",
    description: "Indicates the form that is the owner of the element."
  },
  hidden: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
  },
  htmlFor: {
    required: false,
    control: "text",
    type: "string",
    description: "Associates this Label with an Input. The value of the \u201CFor\u201D attribute should match the ID attribute of the corresponding Input element"
  },
  id: {
    required: false,
    control: "text",
    type: "string",
    description: "Often used with CSS to style a specific element. The value of this attribute must be unique."
  },
  inputMode: {
    description: "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
    required: false,
    control: "select",
    type: "string",
    options: [
      "search",
      "text",
      "none",
      "tel",
      "url",
      "email",
      "numeric",
      "decimal"
    ]
  },
  is: {
    description: "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
    required: false,
    control: "text",
    type: "string"
  },
  itemID: { required: false, control: "text", type: "string" },
  itemProp: { required: false, control: "text", type: "string" },
  itemRef: { required: false, control: "text", type: "string" },
  itemScope: { required: false, control: "boolean", type: "boolean" },
  itemType: { required: false, control: "text", type: "string" },
  lang: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines the language used in the element."
  },
  nonce: { required: false, control: "text", type: "string" },
  placeholder: {
    required: false,
    control: "text",
    type: "string",
    description: "Provides a hint to the user of what can be entered in the field."
  },
  prefix: { required: false, control: "text", type: "string" },
  property: { required: false, control: "text", type: "string" },
  radioGroup: { required: false, control: "text", type: "string" },
  rel: {
    required: false,
    control: "text",
    type: "string",
    description: "Specifies the relationship of the target object to the link object."
  },
  resource: { required: false, control: "text", type: "string" },
  results: { required: false, control: "number", type: "number" },
  rev: { required: false, control: "text", type: "string" },
  role: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines an explicit role for an element for use by assistive technologies."
  },
  security: { required: false, control: "text", type: "string" },
  slot: {
    required: false,
    control: "text",
    type: "string",
    description: "Assigns a slot in a shadow DOM shadow tree to an element."
  },
  spellCheck: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Indicates whether spell checking is allowed for the element."
  },
  suppressContentEditableWarning: {
    required: false,
    control: "boolean",
    type: "boolean"
  },
  suppressHydrationWarning: {
    required: false,
    control: "boolean",
    type: "boolean"
  },
  tabIndex: {
    required: false,
    control: "number",
    type: "number",
    description: "Overrides the browser's default tab order and follows the one specified instead."
  },
  title: {
    required: false,
    control: "text",
    type: "string",
    description: "Text to be displayed in a tooltip when hovering over the element."
  },
  translate: {
    required: false,
    control: "radio",
    type: "string",
    options: ["yes", "no"],
    description: "Specify whether an element's attribute values and the values of its text node children are to be translated when the page is localized, or whether to leave them unchanged."
  },
  typeof: { required: false, control: "text", type: "string" },
  unselectable: {
    required: false,
    control: "radio",
    type: "string",
    options: ["on", "off"]
  },
  vocab: { required: false, control: "text", type: "string" }
};

// src/label.ws.tsx
var presetStyle21 = {
  label: [
    ...label,
    { property: "display", value: { type: "keyword", value: "block" } }
  ]
};
var meta25 = {
  category: "forms",
  invalidAncestors: ["Button", "Label"],
  type: "container",
  label: "Input Label",
  icon: LabelIcon,
  states: defaultStates21,
  presetStyle: presetStyle21,
  order: 2,
  template: [
    {
      type: "instance",
      component: "Label",
      children: [{ type: "text", value: "Form Label" }]
    }
  ]
};
var propsMeta4 = {
  props: {
    ...props4,
    htmlFor: {
      ...props4.htmlFor,
      label: "For"
    }
  },
  initialProps: ["id", "htmlFor"]
};

// src/textarea.ws.tsx
import { FormTextAreaIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates22
} from "@webstudio-is/react-sdk";
import { textarea } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle22 = {
  textarea: [
    ...textarea,
    // resize doesn't work well while on canvas
    { property: "resize", value: { type: "keyword", value: "none" } },
    {
      property: "display",
      value: { type: "keyword", value: "block" }
    }
  ]
};
var meta26 = {
  category: "forms",
  type: "control",
  label: "Text Area",
  description: "A multi-line text input for collecting longer string data from your users.",
  icon: FormTextAreaIcon,
  presetStyle: presetStyle22,
  order: 4,
  states: [
    ...defaultStates22,
    { selector: "::placeholder", label: "Placeholder" },
    { selector: ":valid", label: "Valid" },
    { selector: ":invalid", label: "Invalid" },
    { selector: ":required", label: "Required" },
    { selector: ":optional", label: "Optional" }
    // Additional states will go into submenu
    //{ selector: ":disabled", label: "Disabled" },
    //{ selector: ":enabled", label: "Enabled" },
    //{ selector: ":read-only", label: "Read Only" },
    //{ selector: ":read-write", label: "Read Write" },
  ]
};

// src/radio-button.ws.tsx
import { RadioCheckedIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates23
} from "@webstudio-is/react-sdk";
import { input as input2 } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle23 = {
  input: [
    ...input2,
    {
      property: "marginRight",
      value: { type: "unit", unit: "em", value: 0.5 }
    }
  ]
};
var meta27 = {
  category: "forms",
  invalidAncestors: ["Button"],
  type: "control",
  label: "Radio",
  description: "Use within a form to allow your users to select a single option from a set of mutually exclusive choices. Group multiple radios by matching their \u201CName\u201D properties.",
  icon: RadioCheckedIcon,
  presetStyle: presetStyle23,
  order: 5,
  states: [
    ...defaultStates23,
    { selector: ":checked", label: "Checked" },
    { selector: ":required", label: "Required" },
    { selector: ":optional", label: "Optional" }
    // Additional states will go into submenu
    //{ selector: ":disabled", label: "Disabled" },
    //{ selector: ":enabled", label: "Enabled" },
    //{ selector: ":read-only", label: "Read Only" },
    //{ selector: ":read-write", label: "Read Write" },
  ],
  template: [
    {
      type: "instance",
      component: "Label",
      label: "Radio Field",
      children: [
        { type: "instance", component: "RadioButton", props: [], children: [] },
        {
          type: "instance",
          component: "Text",
          label: "Radio Label",
          props: [{ type: "string", name: "tag", value: "span" }],
          children: [{ type: "text", value: "Radio" }]
        }
      ]
    }
  ]
};

// src/checkbox.ws.tsx
import { CheckboxCheckedIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates24
} from "@webstudio-is/react-sdk";
import { input as input3 } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle24 = {
  input: [
    ...input3,
    {
      property: "marginRight",
      value: { type: "unit", unit: "em", value: 0.5 }
    }
  ]
};
var meta28 = {
  category: "forms",
  invalidAncestors: ["Button"],
  type: "control",
  label: "Checkbox",
  description: "Use within a form to allow your users to toggle between checked and not checked. Group checkboxes by matching their \u201CName\u201D properties. Unlike radios, any number of checkboxes in a group can be checked.",
  icon: CheckboxCheckedIcon,
  presetStyle: presetStyle24,
  order: 6,
  states: [
    ...defaultStates24,
    { selector: ":checked", label: "Checked" },
    { selector: ":required", label: "Required" },
    { selector: ":optional", label: "Optional" },
    { selector: ":disabled", label: "Disabled" },
    { selector: ":enabled", label: "Enabled" },
    { selector: ":read-only", label: "Read Only" },
    { selector: ":read-write", label: "Read Write" }
  ],
  template: [
    {
      type: "instance",
      component: "Label",
      label: "Checkbox Field",
      children: [
        { type: "instance", component: "Checkbox", children: [] },
        {
          type: "instance",
          component: "Text",
          label: "Checkbox Label",
          props: [{ type: "string", name: "tag", value: "span" }],
          children: [{ type: "text", value: "Checkbox" }]
        }
      ]
    }
  ]
};

// src/vimeo.ws.ts
import { PlayIcon, SpinnerIcon, VimeoIcon } from "@webstudio-is/icons/svg";
import {
  defaultStates as defaultStates25
} from "@webstudio-is/react-sdk";
import { div as div3 } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle25 = {
  div: div3
};
var meta29 = {
  category: "media",
  type: "container",
  label: "Vimeo",
  description: "Add a video to your page that is hosted on Vimeo. Paste a Vimeo URL and configure the video in the Settings tab.",
  order: 1,
  icon: VimeoIcon,
  states: defaultStates25,
  presetStyle: presetStyle25,
  template: [
    {
      type: "instance",
      component: "Vimeo",
      styles: [
        {
          property: "position",
          value: { type: "keyword", value: "relative" }
        },
        {
          property: "aspectRatio",
          value: { type: "keyword", value: "640/360" }
        },
        {
          property: "width",
          value: { type: "unit", value: 100, unit: "%" }
        }
      ],
      children: [
        {
          type: "instance",
          component: "VimeoPreviewImage",
          styles: [
            {
              property: "position",
              value: { type: "keyword", value: "absolute" }
            },
            {
              property: "objectFit",
              value: { type: "keyword", value: "cover" }
            },
            {
              property: "width",
              value: { type: "unit", value: 100, unit: "%" }
            },
            {
              property: "height",
              value: { type: "unit", value: 100, unit: "%" }
            },
            {
              property: "borderTopLeftRadius",
              value: { type: "unit", value: 20, unit: "px" }
            },
            {
              property: "borderTopRightRadius",
              value: { type: "unit", value: 20, unit: "px" }
            },
            {
              property: "borderBottomLeftRadius",
              value: { type: "unit", value: 20, unit: "px" }
            },
            {
              property: "borderBottomRightRadius",
              value: { type: "unit", value: 20, unit: "px" }
            },
            {
              property: "objectPosition",
              value: { type: "keyword", value: "cover" }
            }
          ],
          children: [],
          props: [
            {
              type: "string",
              name: "alt",
              value: "Vimeo video preview image"
            },
            {
              type: "string",
              name: "sizes",
              value: "100vw"
            }
          ]
        },
        {
          type: "instance",
          component: "Box",
          label: "Spinner",
          styles: [
            {
              property: "position",
              value: { type: "keyword", value: "absolute" }
            },
            {
              property: "top",
              value: { type: "unit", value: 50, unit: "%" }
            },
            {
              property: "left",
              value: { type: "unit", value: 50, unit: "%" }
            },
            {
              property: "width",
              value: { type: "unit", value: 70, unit: "px" }
            },
            {
              property: "height",
              value: { type: "unit", value: 70, unit: "px" }
            },
            {
              property: "marginTop",
              value: { type: "unit", value: -35, unit: "px" }
            },
            {
              property: "marginLeft",
              value: { type: "unit", value: -35, unit: "px" }
            }
          ],
          children: [
            {
              type: "instance",
              component: "HtmlEmbed",
              label: "Spinner SVG",
              props: [
                {
                  type: "string",
                  name: "code",
                  value: SpinnerIcon
                }
              ],
              children: []
            }
          ]
        },
        {
          type: "instance",
          component: "VimeoPlayButton",
          props: [
            {
              type: "string",
              name: "aria-label",
              value: "Play button"
            }
          ],
          styles: [
            {
              property: "position",
              value: { type: "keyword", value: "absolute" }
            },
            {
              property: "width",
              value: { type: "unit", value: 140, unit: "px" }
            },
            {
              property: "height",
              value: { type: "unit", value: 80, unit: "px" }
            },
            {
              property: "top",
              value: { type: "unit", value: 50, unit: "%" }
            },
            {
              property: "left",
              value: { type: "unit", value: 50, unit: "%" }
            },
            {
              property: "marginTop",
              value: { type: "unit", value: -40, unit: "px" }
            },
            {
              property: "marginLeft",
              value: { type: "unit", value: -70, unit: "px" }
            },
            {
              property: "display",
              value: { type: "keyword", value: "flex" }
            },
            {
              property: "alignItems",
              value: { type: "keyword", value: "center" }
            },
            {
              property: "justifyContent",
              value: { type: "keyword", value: "center" }
            },
            {
              property: "borderTopStyle",
              value: { type: "keyword", value: "none" }
            },
            {
              property: "borderRightStyle",
              value: { type: "keyword", value: "none" }
            },
            {
              property: "borderBottomStyle",
              value: { type: "keyword", value: "none" }
            },
            {
              property: "borderLeftStyle",
              value: { type: "keyword", value: "none" }
            },
            {
              property: "borderTopLeftRadius",
              value: { type: "unit", value: 5, unit: "px" }
            },
            {
              property: "borderTopRightRadius",
              value: { type: "unit", value: 5, unit: "px" }
            },
            {
              property: "borderBottomLeftRadius",
              value: { type: "unit", value: 5, unit: "px" }
            },
            {
              property: "borderBottomRightRadius",
              value: { type: "unit", value: 5, unit: "px" }
            },
            {
              property: "cursor",
              value: { type: "keyword", value: "pointer" }
            },
            {
              property: "backgroundColor",
              value: {
                type: "rgb",
                r: 18,
                g: 18,
                b: 18,
                alpha: 1
              }
            },
            {
              property: "color",
              value: {
                type: "rgb",
                r: 255,
                g: 255,
                b: 255,
                alpha: 1
              }
            },
            {
              state: ":hover",
              property: "backgroundColor",
              value: {
                type: "rgb",
                r: 0,
                g: 173,
                b: 239,
                alpha: 1
              }
            }
          ],
          children: [
            {
              type: "instance",
              component: "Box",
              label: "Play Icon",
              styles: [
                {
                  property: "width",
                  value: { type: "unit", value: 60, unit: "px" }
                },
                {
                  property: "height",
                  value: { type: "unit", value: 60, unit: "px" }
                }
              ],
              props: [
                {
                  type: "string",
                  name: "aria-hidden",
                  value: "true"
                }
              ],
              children: [
                {
                  type: "instance",
                  component: "HtmlEmbed",
                  label: "Play SVG",
                  props: [
                    {
                      type: "string",
                      name: "code",
                      value: PlayIcon
                    }
                  ],
                  children: []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
};

// src/vimeo-preview-image.ws.ts
import "@webstudio-is/react-sdk";

// src/__generated__/vimeo-preview-image.props.ts
var props5 = {
  about: { required: false, control: "text", type: "string" },
  accessKey: {
    required: false,
    control: "text",
    type: "string",
    description: "Keyboard shortcut to activate or add focus to the element."
  },
  alt: {
    required: false,
    control: "text",
    type: "string",
    description: "Text description of the image, which is very important for accessibility and search engine optimization. Screen readers read this description to users so they know what the image means. Alt text is also displayed on the page if the image can't be loaded for some reason."
  },
  "aria-activedescendant": {
    description: "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-atomic": {
    description: "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-autocomplete": {
    description: "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
    required: false,
    control: "select",
    type: "string",
    options: ["list", "none", "inline", "both"]
  },
  "aria-braillelabel": {
    description: "Defines a string value that labels the current element, which is intended to be converted into Braille.\n@see aria-label.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-brailleroledescription": {
    description: "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.\n@see aria-roledescription.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-busy": { required: false, control: "boolean", type: "boolean" },
  "aria-checked": {
    description: 'Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.',
    required: false,
    control: "text",
    type: "string"
  },
  "aria-colcount": {
    description: "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-colindex": {
    description: "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-colindextext": {
    description: "Defines a human readable text alternative of aria-colindex.\n@see aria-rowindextext.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-colspan": {
    description: "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-controls": {
    description: "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-current": {
    description: "Indicates the element that represents the current item within a container or set of related elements.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-describedby": {
    description: "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-description": {
    description: "Defines a string value that describes or annotates the current element.\n@see related aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-details": {
    description: "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-disabled": {
    description: "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-dropeffect": {
    description: "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
    required: false,
    control: "select",
    type: "string",
    options: ["link", "none", "copy", "execute", "move", "popup"]
  },
  "aria-errormessage": {
    description: "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-expanded": {
    description: "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-flowto": {
    description: "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-grabbed": {
    description: `Indicates an element's "grabbed" state in a drag-and-drop operation.
@deprecated in ARIA 1.1`,
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-haspopup": {
    description: "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-hidden": {
    description: "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-invalid": {
    description: "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-keyshortcuts": {
    description: "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-label": {
    description: "Provides the accessible name that describes an interactive element if no other accessible name exists, for example in a button that contains an image with no text.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-labelledby": {
    description: "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-level": {
    description: "Defines the hierarchical level of an element within a structure.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-live": {
    description: "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
    required: false,
    control: "radio",
    type: "string",
    options: ["off", "assertive", "polite"]
  },
  "aria-modal": {
    description: "Indicates whether an element is modal when displayed.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-multiline": {
    description: "Indicates whether a text box accepts multiple lines of input or only a single line.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-multiselectable": {
    description: "Indicates that the user may select more than one item from the current selectable descendants.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-orientation": {
    description: "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
    required: false,
    control: "radio",
    type: "string",
    options: ["horizontal", "vertical"]
  },
  "aria-owns": {
    description: "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-placeholder": {
    description: "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-posinset": {
    description: "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-pressed": {
    description: 'Indicates the current "pressed" state of toggle buttons.\n@see aria-checked\n@see aria-selected.',
    required: false,
    control: "text",
    type: "string"
  },
  "aria-readonly": {
    description: "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-relevant": {
    description: "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
    required: false,
    control: "select",
    type: "string",
    options: [
      "text",
      "additions",
      "additions removals",
      "additions text",
      "all",
      "removals",
      "removals additions",
      "removals text",
      "text additions",
      "text removals"
    ]
  },
  "aria-required": {
    description: "Indicates that user input is required on the element before a form may be submitted.",
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-roledescription": {
    description: "Defines a human-readable, author-localized description for the role of an element.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-rowcount": {
    description: "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-rowindex": {
    description: "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-rowindextext": {
    description: "Defines a human readable text alternative of aria-rowindex.\n@see aria-colindextext.",
    required: false,
    control: "text",
    type: "string"
  },
  "aria-rowspan": {
    description: "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-selected": {
    description: 'Indicates the current "selected" state of various widgets.\n@see aria-checked\n@see aria-pressed.',
    required: false,
    control: "boolean",
    type: "boolean"
  },
  "aria-setsize": {
    description: "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-sort": {
    description: "Indicates if items in a table or grid are sorted in ascending or descending order.",
    required: false,
    control: "select",
    type: "string",
    options: ["none", "ascending", "descending", "other"]
  },
  "aria-valuemax": {
    description: "Defines the maximum allowed value for a range widget.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-valuemin": {
    description: "Defines the minimum allowed value for a range widget.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-valuenow": {
    description: "Defines the current value for a range widget.\n@see aria-valuetext.",
    required: false,
    control: "number",
    type: "number"
  },
  "aria-valuetext": {
    description: "Defines the human readable text alternative of aria-valuenow for a range widget.",
    required: false,
    control: "text",
    type: "string"
  },
  autoCapitalize: {
    required: false,
    control: "text",
    type: "string",
    description: "Sets whether input is automatically capitalized when entered by user."
  },
  autoCorrect: { required: false, control: "text", type: "string" },
  autoFocus: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Indicates that an element should be focused on page load, or when its parent dialog is displayed."
  },
  autoSave: { required: false, control: "text", type: "string" },
  className: { required: false, control: "text", type: "string" },
  color: {
    required: false,
    control: "color",
    type: "string",
    description: "This attribute sets the text color using either a named color or a  color specified in the hexadecimal #RRGGBB format. Note: This is a legacy attribute. Please use the CSS color property instead."
  },
  content: {
    required: false,
    control: "text",
    type: "string",
    description: "A value associated with http-equiv orname depending on the context."
  },
  contextMenu: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines the ID of a menu element which willserve as the element's context menu."
  },
  crossOrigin: {
    required: false,
    control: "radio",
    type: "string",
    options: ["", "anonymous", "use-credentials"],
    description: "How the element handles cross-origin requests"
  },
  datatype: { required: false, control: "text", type: "string" },
  decoding: {
    required: false,
    control: "radio",
    type: "string",
    options: ["async", "auto", "sync"],
    description: "Indicates the preferred method to decode the image."
  },
  defaultChecked: { required: false, control: "boolean", type: "boolean" },
  dir: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
  },
  draggable: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Defines whether the element can be dragged."
  },
  height: {
    required: false,
    control: "number",
    type: "number",
    description: "Defines the image\u2019s height in pixels."
  },
  hidden: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
  },
  id: {
    required: false,
    control: "text",
    type: "string",
    description: "Often used with CSS to style a specific element. The value of this attribute must be unique."
  },
  inputMode: {
    description: "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
    required: false,
    control: "select",
    type: "string",
    options: [
      "search",
      "text",
      "none",
      "tel",
      "url",
      "email",
      "numeric",
      "decimal"
    ]
  },
  is: {
    description: "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
    required: false,
    control: "text",
    type: "string"
  },
  itemID: { required: false, control: "text", type: "string" },
  itemProp: { required: false, control: "text", type: "string" },
  itemRef: { required: false, control: "text", type: "string" },
  itemScope: { required: false, control: "boolean", type: "boolean" },
  itemType: { required: false, control: "text", type: "string" },
  lang: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines the language used in the element."
  },
  loading: {
    required: false,
    control: "radio",
    type: "string",
    options: ["eager", "lazy"],
    description: "Determines whether the image will load as soon as possible (Eager), or when it scrolls into view (Lazy). Lazy loading is a great option for pages with many images because it can significantly reduce the time it takes for the page to load initially."
  },
  nonce: { required: false, control: "text", type: "string" },
  optimize: { required: false, control: "boolean", type: "boolean" },
  placeholder: {
    required: false,
    control: "text",
    type: "string",
    description: "Provides a hint to the user of what can be entered in the field."
  },
  prefix: { required: false, control: "text", type: "string" },
  property: { required: false, control: "text", type: "string" },
  quality: { required: false, control: "number", type: "number" },
  radioGroup: { required: false, control: "text", type: "string" },
  referrerPolicy: {
    required: false,
    control: "select",
    type: "string",
    options: [
      "",
      "no-referrer",
      "no-referrer-when-downgrade",
      "origin",
      "origin-when-cross-origin",
      "same-origin",
      "strict-origin",
      "strict-origin-when-cross-origin",
      "unsafe-url"
    ],
    description: "Specifies which referrer is sent when fetching the resource."
  },
  rel: {
    required: false,
    control: "text",
    type: "string",
    description: "Specifies the relationship of the target object to the link object."
  },
  resource: { required: false, control: "text", type: "string" },
  results: { required: false, control: "number", type: "number" },
  rev: { required: false, control: "text", type: "string" },
  role: {
    required: false,
    control: "text",
    type: "string",
    description: "Defines an explicit role for an element for use by assistive technologies."
  },
  security: { required: false, control: "text", type: "string" },
  sizes: { required: false, control: "text", type: "string" },
  slot: {
    required: false,
    control: "text",
    type: "string",
    description: "Assigns a slot in a shadow DOM shadow tree to an element."
  },
  spellCheck: {
    required: false,
    control: "boolean",
    type: "boolean",
    description: "Indicates whether spell checking is allowed for the element."
  },
  src: {
    required: false,
    control: "text",
    type: "string",
    description: "The URL of the embeddable content."
  },
  srcSet: {
    required: false,
    control: "text",
    type: "string",
    description: "One or more responsive image candidates."
  },
  suppressContentEditableWarning: {
    required: false,
    control: "boolean",
    type: "boolean"
  },
  suppressHydrationWarning: {
    required: false,
    control: "boolean",
    type: "boolean"
  },
  tabIndex: {
    required: false,
    control: "number",
    type: "number",
    description: "Overrides the browser's default tab order and follows the one specified instead."
  },
  title: {
    required: false,
    control: "text",
    type: "string",
    description: "Text to be displayed in a tooltip when hovering over the element."
  },
  translate: {
    required: false,
    control: "radio",
    type: "string",
    options: ["yes", "no"],
    description: "Specify whether an element's attribute values and the values of its text node children are to be translated when the page is localized, or whether to leave them unchanged."
  },
  typeof: { required: false, control: "text", type: "string" },
  unselectable: {
    required: false,
    control: "radio",
    type: "string",
    options: ["on", "off"]
  },
  useMap: { required: false, control: "text", type: "string" },
  vocab: { required: false, control: "text", type: "string" },
  width: {
    required: false,
    control: "number",
    type: "number",
    description: "Defines the image\u2019s width in pixels."
  }
};

// src/vimeo-preview-image.ws.ts
var meta30 = {
  ...meta19,
  category: "hidden",
  label: "Preview Image",
  requiredAncestors: ["Vimeo"]
};
var propsMeta5 = {
  props: { ...props5, ...propsOverrides },
  initialProps: propsMeta3.initialProps
};

// src/vimeo-play-button.ws.ts
import {
  defaultStates as defaultStates26
} from "@webstudio-is/react-sdk";
import { ButtonElementIcon as ButtonElementIcon2 } from "@webstudio-is/icons/svg";
import { button as button2 } from "@webstudio-is/react-sdk/css-normalize";
var presetStyle26 = {
  button: button2
};
var meta31 = {
  category: "hidden",
  type: "container",
  invalidAncestors: ["Button"],
  requiredAncestors: ["Vimeo"],
  label: "Play Button",
  icon: ButtonElementIcon2,
  presetStyle: presetStyle26,
  states: defaultStates26
};

// src/vimeo-spinner.ws.ts
import {
  defaultStates as defaultStates27
} from "@webstudio-is/react-sdk";
import { div as div4 } from "@webstudio-is/react-sdk/css-normalize";
import { BoxIcon as BoxIcon2 } from "@webstudio-is/icons/svg";
var presetStyle27 = {
  div: div4
};
var meta32 = {
  type: "container",
  icon: BoxIcon2,
  states: defaultStates27,
  presetStyle: presetStyle27,
  category: "hidden",
  label: "Spinner",
  requiredAncestors: ["Vimeo"]
};
export {
  meta20 as Blockquote,
  meta4 as Body,
  meta12 as Bold,
  meta5 as Box,
  meta16 as Button,
  meta28 as Checkbox,
  meta24 as CodeText,
  meta18 as Form,
  meta2 as Fragment,
  meta7 as Heading,
  meta3 as HtmlEmbed,
  meta19 as Image,
  meta17 as Input,
  meta13 as Italic,
  meta25 as Label,
  meta9 as Link,
  meta21 as List,
  meta22 as ListItem,
  meta8 as Paragraph,
  meta27 as RadioButton,
  meta10 as RichTextLink,
  meta23 as Separator,
  meta as Slot,
  meta11 as Span,
  meta15 as Subscript,
  meta14 as Superscript,
  meta6 as Text,
  meta26 as Textarea,
  meta29 as Vimeo,
  meta31 as VimeoPlayButton,
  meta30 as VimeoPreviewImage,
  meta32 as VimeoSpinner
};
